import 'package:flutter/material.dart';

void main() {
  runApp(
      const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My Bag',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const TShirtShop(),
    );
  }
}

class TShirtShop extends StatefulWidget {
  const TShirtShop({super.key});

  @override
  _TShirtShopState createState() => _TShirtShopState();
}

class _TShirtShopState extends State<TShirtShop> {
  final Map<String, Map<String, dynamic>> _items = {
    'Pullover': {
      'color': 'Black',
      'size': 'L',
      'price': 15.0,
      'image': 'assets/images/1.jpg',
    },
    'T-Shirt': {
      'color': 'Grey',
      'size': 'L',
      'price': 20.0,
      'image': 'assets/images/2.jpeg',
    },
    'Sport Dress': {
      'color': 'Black',
      'size': 'M',
      'price': 25.0,
      'image': 'assets/images/1.jpg',
    },
  };

  final Map<String, int> _cart = {
    'Pullover': 0,
    'T-Shirt': 0,
    'Sport Dress': 0,
  };

  void _incrementItem(String item) {
    setState(() {
      _cart[item] = (_cart[item] ?? 0) + 1;
    });
  }

  void _decrementItem(String item) {
    setState(() {
      if ((_cart[item] ?? 0) > 0) {
        _cart[item] = (_cart[item] ?? 0) - 1;
      }
    });
  }

  double _calculateTotalAmount() {
    double totalAmount = 0;
    _cart.forEach((item, quantity) {
      final price = _items[item]?['price'] ?? 0;
      totalAmount += price * quantity;
    });
    return totalAmount;
  }

  void _checkout() {
    final totalAmount = _calculateTotalAmount();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Congratulations! Your total amount is \$${totalAmount.toStringAsFixed(2)}'),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final totalAmount = _calculateTotalAmount();

    return Scaffold(
      appBar: AppBar(
        title: const Text('My Bag'),
      ),
      body: Column(
        children: _items.keys.map((item) {
          final details = _items[item]!;
          final color = details['color'];
          final size = details['size'];
          final price = details['price'];
          final image = details['image'];

          return Container(
            margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
            child: Card(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  ListTile(
                    leading: SizedBox(
                      width: 100,
                      height: 100,
                      child: Image.asset(
                        image,
                        fit: BoxFit.contain,
                      ),
                    ),
                    title: Text(item),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('Color: $color, Size: $size', style: const TextStyle(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 10),
                        Row(
                          children: <Widget>[
                            Expanded(
                              child: Text(
                                '\$${price.toStringAsFixed(2)}',
                                style: const TextStyle(fontWeight: FontWeight.bold),
                                textAlign: TextAlign.right,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 10),
                        Container(
                          padding: const EdgeInsets.symmetric(vertical: 10),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: <Widget>[
                              _RoundedButton(
                                icon: Icons.remove,
                                onPressed: () => _decrementItem(item),
                              ),
                              const SizedBox(width: 16),
                              Text('${_cart[item] ?? 0}'),
                              const SizedBox(width: 16),
                              _RoundedButton(
                                icon: Icons.add,
                                onPressed: () => _incrementItem(item),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 10),
                      ],
                    ),
                  ),
                  const Divider(),
                ],
              ),
            ),
          );
        }).toList(),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Total Amount: \$${totalAmount.toStringAsFixed(2)}',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.all<Color>(Colors.deepOrange),
                ),
                onPressed: _checkout,
                child: const Padding(
                  padding: EdgeInsets.symmetric(vertical: 16.0),
                  child: Text('CHECK OUT', style: TextStyle(color: Colors.white, fontSize: 18)),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _RoundedButton extends StatelessWidget {
  final IconData icon;
  final VoidCallback onPressed;

  const _RoundedButton({required this.icon, required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey[400],
        shape: BoxShape.circle,
      ),
      child: IconButton(
        icon: Icon(icon, color: Colors.white),
        onPressed: onPressed,
      ),
    );
  }
}
